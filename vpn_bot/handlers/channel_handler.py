import asyncio
from datetime import date
from aiogram.dispatcher.filters import Text, Command
from aiogram.dispatcher import FSMContext
from aiogram import types
from loader import dp, bot
from states import *
from utils import API, apschedule, filters
import logging
from utils import apschedule
from data import config
from db import mysql
from utils.API_X import delete_user_x, modify_user_status_x


@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('help'))
async def command_help(message: types.Message):
    text = """/set_friend user_id status(0, 1)
/set_balance user_id balance - –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
/un_balance user_id balance - —É–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
/stop_user user_id - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/remove_user user_id - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å–∞–º–æ–≥–æ
/stat - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/set_price PRICE(—á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ PRICE)"""
    await message.answer(text)


# –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∂–∞–±—ã
@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('set_friend'))
async def command_set_friends(message: types.Message):
    try:
        command, user_id, status = message.text.split()
        status = int(status)
        await mysql.set_friend(user_id, status)
        if status == 1:
            await bot.send_message(chat_id=user_id, text="–í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: Free")
            await message.answer(f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —Å—Ç–∞—Ç—É—Å: Free')
        else:
            await bot.send_message(chat_id=user_id, text="–í–∞–º —É–±—Ä–∞–ª–∏ —Å—Ç–∞—Ç—É—Å: Free")
            await message.answer(f'–í—ã —É–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —Å—Ç–∞—Ç—É—Å: Free')
    except Exception as e:
        logging.exception(e)


# —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('newswhere'))
async def command_news(message: types.Message):
    count = 0
    text = message.text[13:]
    number_server = message.text[11:12]
    users = await mysql.get_users_info_where(int(number_server))
    for user in users:
        try:
            await bot.send_message(chat_id=user['user_id'], text=text)
        except Exception as e:
            count += 1
            logging.error(f"user_id: {user['user_id']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {e}")
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')


@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('set_balance'))
async def command_set_balance(message: types.Message):
    try:
        command, user_id, balance = message.text.split()
        await mysql.set_balance_and_get_user_info(user_id, int(balance))
        await message.answer(f'–ü–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {balance}')
        await bot.send_message(chat_id=user_id, text=f'–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {balance} —Ä—É–±–ª–µ–π')
    except Exception as e:
        await message.answer(f'üö´ –û—à–∏–±–∫–∞: {e}')


@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('un_balance'))
async def command_un_balance(message: types.Message):
    try:
        command, user_id, balance = message.text.split()
        await mysql.un_balance_and_get_user_info(user_id, int(balance))
        await message.answer(f'–°–ø–∏—Å–∞–ª–∏ —Å –±–∞–ª–∞–Ω—Å–∞ {user_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {balance}')
    except Exception as e:
        await message.answer(f'üö´ –û—à–∏–±–∫–∞: {e}')


@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('re'))
async def command_re(message: types.Message):
    try:
        command, user_id, *text = message.text.split()
        text.append('\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞\n<b>/start</b> - –≤–µ—Ä–Ω—É—Ç—å—Å—è –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        await bot.send_message(chat_id=user_id, text=' '.join(text))
        await message.answer('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    except Exception as e:
        await message.answer(f'üö´ –û—à–∏–±–∫–∞: {e}')


@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('stop_user'))
async def command_stop_user(message: types.Message):
    try:
        command, user_id = message.text.split()
        list_user_device = await mysql.get_user_device(user_id)
        for conf in list_user_device:
            try:
                await apschedule.enable_disable_config([conf], 'disable')
            except Exception as e:
                pass
            try:
                await modify_user_status_x(conf['config_name'], 'disabled', conf['number_server'])
            except Exception as e:
                pass
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    except Exception as e:
        await message.answer(f'üö´ –û—à–∏–±–∫–∞: {e}')


@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('go_user'))
async def command_go_user(message: types.Message):
    try:
        command, user_id = message.text.split()
        list_user_device = await mysql.get_user_device(user_id)
        for conf in list_user_device:
            try:
                await apschedule.enable_disable_config([conf], 'enable')
            except Exception as e:
                pass
            try:
                await modify_user_status_x(
                    conf['config_name'], 
                    'active', 
                    conf['number_server']
                    )
            except Exception as e:
                pass
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    except Exception as e:
        await message.answer(f'üö´ –û—à–∏–±–∫–∞: {e}')



@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('remove_user'))
async def command_remove_user(message: types.Message):
    command, user_id = message.text.split()
    list_user_device = await mysql.get_user_device(user_id)
    for user_device in list_user_device:
        try:
            result = await API.delete_peer(config.dict_server[user_device['number_server']]['url'], config.dict_server[user_device['number_server']]['password'], user_device['id_server'])
            if result:
                await mysql.delete_peer(user_device['config_name'])
            await asyncio.sleep(2)
        except Exception as e:
            await message.answer(f'üö´ –û—à–∏–±–∫–∞: {e}')
            logging.error(f'{user_device} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {e}')
        try:
            await delete_user_x(
                user_device['config_name'],
                user_device['number_server'])
            await mysql.delete_peer(user_device['config_name'])
        except Exception as e:
            logging.error(f'{user_device} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {e}')


@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), content_types=types.ContentTypes.DOCUMENT)
async def proccess_work_with_receipt(message: types.Message):
    try:
        if message.caption.startswith('/receipt'):
            command, user_id = message.caption.split()
            photo = message.document.file_id
            await bot.send_document(chat_id=user_id,
                                    document=photo,
                                    caption='–í—ã—Å—ã–ª–∞–µ–º –≤–∞–º —á–µ–∫, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.')
    except Exception as e:
        await message.answer(f'üö´ –û—à–∏–±–∫–∞: {e}')


@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('stat'))
async def command_stat(message: types.Message):
    data = await mysql.get_stat()
    text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {date.today()}

–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{data['count_users']}</b>
–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: <b>{data['count_config']}</b>"""
    for i, serv in config.dict_server.items():
        text += f"\n{i} —Å–µ—Ä–≤–µ—Ä ({serv['country']}): <b>{data[f'count_server_{i}']}</b>"
    await message.answer(text)


@dp.channel_post_handler(filters.IsAdminChatFilter(is_admin_chat=True), Command('set_price'))
async def command_set_price(message: types.Message):
    comand, price = message.text.split()
    await mysql.set_price(int(price))
    await message.answer(f'–¶–µ–Ω–∞ –∑–∞ –∫–æ–Ω—Ñ–∏–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {price} —Ä—É–±')